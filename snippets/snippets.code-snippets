{
    "New function": {
        "prefix": "func",
        "body": "[func ${1:name} (${2:params}) ${3:body}]",
        "description": "Define function (no return type)"
    },
    "New typed function": {
        "prefix": "funct",
        "body": "[func ${1:name} (${2:params}) -> !${3:return_type} ${4:body}]",
        "description": "Define typed function with return type"
    },
    "New array": {
        "prefix": "arr",
        "body": "[var (${1:name} !array<${2:type},${3:size}>) (array ${4:elements})]",
        "description": "Create array variable"
    },
    "Get array element by index": {
        "prefix": "index",
        "body": "[index ${1:name} ${2:index}]",
        "description": "Get array element by index"
    },
    "Set element in array by index": {
        "prefix": "seta",
        "body": "[set (index ${1:name} ${2:index}) ${3:value}]",
        "description": "Set element value by index"
    },
    "New var": {
        "prefix": "var",
        "body": "[var ${1:name} ${2:value}]",
        "description": "Define untyped variable"
    },
    "New var with type": {
        "prefix": "vart",
        "body": "[var (${1:name} !${2:type}) ${3:value}]",
        "description": "Define typed variable"
    },
    "New const": {
        "prefix": "const",
        "body": "[const ${1:name} ${2:value}]",
        "description": "Define untyped constant"
    },
    "New const with type": {
        "prefix": "constt",
        "body": "[const (${1:name} !${2:type}) ${3:value}]",
        "description": "Define typed constant"
    },
    "Set value to var": {
        "prefix": "set",
        "body": "[set ${1:name} ${2:value}]",
        "description": "Set variable value"
    },
    "Scope": {
        "prefix": "scope",
        "body": "[scope\n    ${1:body}\n]",
        "description": "Create new scope"
    },
    "If-elif-else conditions": {
        "prefix": "if",
        "body": "[if\n    ${1:condition} ${2:then_body}\n    elif ${3:condition} ${4:then_body}\n    else ${5:else_body}\n]",
        "description": "If-elif-else statement"
    },
    "Loop": {
        "prefix": "loop",
        "body": "[loop\n    ${1:body}\n]",
        "description": "Infinite loop"
    },
    "While loop": {
        "prefix": "while",
        "body": "[while ${1:condition}\n    ${2:body}\n]",
        "description": "While loop"
    },
    "For loop": {
        "prefix": "for",
        "body": "[for ${1:init} ${2:condition} ${3:step}\n    ${4:body}\n]",
        "description": "For loop"
    },
    "Break loop": {
        "prefix": "break",
        "body": "[break]",
        "description": "Break loop execution"
    },
    "Continue iteration": {
        "prefix": "continue",
        "body": "[continue]",
        "description": "Continue loop iteration"
    },
    "Check (if-then-else)": {
        "prefix": "check",
        "body": "[check ${1:condition}\n    ${2:then_body}\n    ${3:else_body}\n]",
        "description": "Ternary conditional"
    },
    "Formatted Print": {
        "prefix": "fprint",
        "body": "[fprint \"${1:format}\" ${2:args}]",
        "description": "Formatted print"
    },
    "Formatted input": {
        "prefix": "finput",
        "body": "[finput \"${1:format}\" ${2:vars}]",
        "description": "Formatted input"
    },
    
    // НИЗКОУРОВНЕВЫЕ ОПЕРАЦИИ //
    
    // Работа с памятью
    "Memory allocation": {
        "prefix": "malloc",
        "body": "[mem-alloc (sizeof !${1:type})]",
        "description": "Allocate memory"
    },
    "Memory free": {
        "prefix": "mfree",
        "body": "[mem-free ${1:pointer}]",
        "description": "Free allocated memory"
    },
    "Memory write": {
        "prefix": "mwrite",
        "body": "[mem-write ${1:pointer} ${2:value}]",
        "description": "Write value to memory"
    },
    "Memory read": {
        "prefix": "mread",
        "body": "[mem-read ${1:pointer} !${2:type}]",
        "description": "Read value from memory"
    },
    "Get variable pointer": {
        "prefix": "mptr",
        "body": "[mem-ptr ${1:variable}]",
        "description": "Get pointer to variable"
    },
    "Pointer dereference": {
        "prefix": "mderef",
        "body": "[mem-deref ${1:pointer} !${2:type}]",
        "description": "Dereference pointer"
    },
    
    // Побитовые операции
    "Bitwise AND": {
        "prefix": "band",
        "body": "[bit-and ${1:a} ${2:b}]",
        "description": "Bitwise AND (&)"
    },
    "Bitwise OR": {
        "prefix": "bor",
        "body": "[bit-or ${1:a} ${2:b}]",
        "description": "Bitwise OR (|)"
    },
    "Bitwise XOR": {
        "prefix": "bxor",
        "body": "[bit-xor ${1:a} ${2:b}]",
        "description": "Bitwise XOR (^)"
    },
    "Bitwise shift left": {
        "prefix": "bshl",
        "body": "[bit-shl ${1:value} ${2:shift}]",
        "description": "Shift bits left (<<)"
    },
    "Bitwise shift right": {
        "prefix": "bshr",
        "body": "[bit-shr ${1:value} ${2:shift}]",
        "description": "Shift bits right (>>)"
    },
    "Bitwise NOT": {
        "prefix": "bnot",
        "body": "[bit-not ${1:value}]",
        "description": "Bitwise NOT (~)"
    },
    
    // Работа с байтами
    "Read byte": {
        "prefix": "bread",
        "body": "[byte-read ${1:pointer}]",
        "description": "Read byte from memory"
    },
    "Write byte": {
        "prefix": "bwrite",
        "body": "[byte-write ${1:pointer} ${2:value}]",
        "description": "Write byte to memory"
    },
    
    // Другие низкоуровневые операции
    "Sizeof type": {
        "prefix": "sizeof",
        "body": "[sizeof !${1:type}]",
        "description": "Get size of type in bytes"
    },
    "Static size check": {
        "prefix": "sizet",
        "body": "!size:${1:expected_size}!${2:type}",
        "description": "Type with size constraint"
    },
    
    // ТИПЫ ДАННЫХ //
    "Pointer type": {
        "prefix": "!ptr",
        "body": "!ptr",
        "description": "Pointer type"
    },
    "Int type": {
        "prefix": "!int",
        "body": "!int",
        "description": "Integer type (64-bit)"
    },
    "Int32 type": {
        "prefix": "!int32",
        "body": "!int32",
        "description": "32-bit integer"
    },
    "Int16 type": {
        "prefix": "!int16",
        "body": "!int16",
        "description": "16-bit integer"
    },
    "Int8 type": {
        "prefix": "!int8",
        "body": "!int8",
        "description": "8-bit integer"
    },
    "Float (fractional) type": {
        "prefix": "!frac",
        "body": "!frac",
        "description": "Floating point number"
    },
    "String type": {
        "prefix": "!str",
        "body": "!str",
        "description": "String type"
    },
    "Boolean type": {
        "prefix": "!bool",
        "body": "!bool",
        "description": "Boolean type"
    },
    "Void type": {
        "prefix": "!none",
        "body": "!none",
        "description": "Void type (no return value)"
    }
}
